class GZC_PainElementalAttackEffect : GZC_Effect
{
	Default
	{
		GZC_Effect.ignore true;
	}
	
	override bool verify()
	{
		return mapHasThisActor("PainElemental");
	}
	
	Static Actor getNearestElemental(Actor _soul)
	{
		double dist = 0x7FFFFFF;
		Actor closest = null;
	
		for (let i = BlockThingsIterator.Create(_soul, 64); i.Next();)
		{
			actor thing = i.thing;
			if (thing == _soul) continue;
			
			if (thing.distance3D(_soul) < dist)
			{
				closest = thing;
				dist = thing.distance3D(_soul);
			}
		}
		
		return closest;
	}
}

class GZC_PainElementalRepeater : GZC_Effect
{
	default
	{
		GZC_Effect.title "Pain Elementals repeat attack";
		GZC_Effect.duration 35 * 60 * 3;
	}
	
	override void onWorldThingSpawn(WorldEvent _event)
	{
		if (!(_event.thing is "LostSoul")) return;
		
		let grumpy = GZC_PainElementalAttackEffect.getNearestElemental(_event.thing);
		
		if (grumpy.isVisible(grumpy.target, true) && grumpy.target.health > 0)
		{
			grumpy.setStateLabel("Missile");
		}
		else
		{
			int rnd = random(0, 255);
			if (rnd < 40) grumpy.SetStateLabel("See");
			else
			{
				grumpy.setStateLabel("Missile");
			}
		}
	}

	override bool verify()
	{
		return mapHasThisActor("PainElemental");
	}
}