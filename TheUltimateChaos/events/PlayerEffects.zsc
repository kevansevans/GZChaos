Class TUC_ScardeyItems : TUC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo is "Inventory")
			{
				if (player.distance3D(mo) < 256)
				{
					mo.bSlidesOnWalls = true;
					mo.bNoBlockMonst = true;
					mo.thrust(15, player.angleTo(mo));
				}
			}
		}
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_ScardeyItems');
		event.eventname = "Pickups are scared of player";
		event.duration = 35 * 60 * 2;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_RightJoyconDrift : TUC_Event
{
	double drift;
	double angle;
	
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		double xspeed = cos(angle) * drift;
		double yspeed = sin(angle) * drift;
		
		player.mo.angle += (xspeed / 10);
		player.mo.pitch += (yspeed / 10);
		
		player.mo.MovePlayer();
	}
	
	override void closeFunc()
	{
	
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_RightJoyconDrift');
		TUC_RightJoyconDrift(event).drift = random(-5, 5);
		TUC_RightJoyconDrift(event).angle = random(0, 359);
		event.eventname = "Right Joycon drift";
		event.duration = 35 * 60 * 2;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_LeftJoyconDrift : TUC_Event
{
	double drift;
	double angle;
	
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		double xspeed = cos(angle) * drift;
		double yspeed = sin(angle) * drift;
		
		player.cmd.forwardmove = int(yspeed);
		player.cmd.sidemove = int(xspeed);
		
		player.mo.MovePlayer();
	}
	
	override void closeFunc()
	{
	
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_LeftJoyconDrift');
		TUC_LeftJoyconDrift(event).drift = random(400, 600);
		TUC_LeftJoyconDrift(event).angle = random(0, 359);
		event.eventname = "Left Joycon drift";
		event.duration = 35 * 60 * 2;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_DisableForwardBackwards : TUC_Event
{
	double f1_move;
	double f2_move;
	
	bool set;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		
		if (!set)
		{
			f1_move = player.forwardMove1;
			f2_move = player.forwardMove2;
			set = true;
		}
		
		player.forwardMove1 = player.forwardMove2 = 0;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		
		player.forwardMove1 = f1_move;
		player.forwardMove2 = f2_move;
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_DisableForwardBackwards');
		event.eventname = "Disable Forward/Backwards movement";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_DisableStrafingMovement : TUC_Event
{
	double s1_move;
	double s2_move;
	
	bool set;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		
		if (!set)
		{
			s1_move = player.sideMove1;
			s2_move = player.sideMove2;
			set = true;
		}
		
		player.sideMove1 = player.sideMove2 = 0;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		
		player.sideMove1 = s1_move;
		player.sideMove2 = s2_move;
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_DisableStrafingMovement');
		event.eventname = "Disable strafing movement";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_InvertPlayerMovement : TUC_Event
{
	double f1_move;
	double f2_move;
	double s1_move;
	double s2_move;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;

		f1_move = player.forwardMove1;
		f2_move = player.forwardMove2;
		s1_move = player.sideMove1;
		s2_move = player.sideMove2;

		player.forwardMove1 *= -1;
		player.forwardMove2 *= -1;
		player.sideMove1 *= -1;
		player.sideMove2 *= -1;
		
		activated = true;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		
		player.forwardMove1 = f1_move;
		player.forwardMove2 = f2_move;
		player.sideMove1 = s1_move;
		player.sideMove2 = s2_move;
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_InvertPlayerMovement');
		event.eventname = "Inverted movement";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_GameEndPlayer : TUC_Event
{
	int startframe;
	bool screm;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		if (!screm)
		{
			player.A_PlayerScream();
			screm = true;
		}
		if (gametic - startframe >= 35 * 1)
		{
			player.A_Explode(999, 64);
		}
		else
		{
			Player.A_SetMugshotState("Ouch");
		}
	}
	
	override void closeFunc()
	{
	
	}

	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_GameEndPlayer');
		TUC_GameEndPlayer(event).startframe = gametic;
		event.eventname = "Player commits suicide";
		event.duration = 35 * 90;
		event.type = E_HiddenTimer;
		return event;
	}
}

Class TUC_FakeGameEndPlayer : TUC_Event
{
	int startframe;
	bool screm;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		if (!screm)
		{
			player.A_PlayerScream();
			screm = true;
		}
		if (gametic - startframe <= 35 * 1)
		{
			Player.A_SetMugshotState("Ouch");
		}
		else if (gametic - startframe >= 35 * 3)
		{
			eventname = "Fake suicide :)";
			activated = true;
		}
	}
	
	override void closeFunc()
	{
	
	}

	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_FakeGameEndPlayer');
		TUC_FakeGameEndPlayer(event).startframe = gametic;
		event.eventname = "Player commits suicide";
		event.duration = 35 * 90;
		event.type = E_HiddenTimer;
		return event;
	}
}

Class TUC_CantStopFiring : TUC_Event
{
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		player.cmd.buttons |= (BT_ATTACK | BT_ALTATTACK);
		player.mo.checkWeaponFire();
	}
	
	override void closeFunc()
	{
	
	}

	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_CantStopFiring');
		event.eventname = "Can't stop shooting!";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_SuperIcePhysics : TUC_Event
{
	override void eventFUnc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bNoFriction = true;
	}
	
	override void closeFunc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bNoFriction = false;
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_SuperIcePhysics');
		event.eventname = "Super Ice Physics";
		event.duration = (35 * 60 * 2) + (35 * 30);
		event.type = E_Timed;
		return event;
	}
}

Class TUC_FallDamage : TUC_Event
{
	override void eventFUnc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bFallDamage = true;
	}
	
	override void closeFunc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bFallDamage = false;
	}
	
	Static TUC_Event create()
	{
		TUC_Event event = new('TUC_FallDamage');
		event.eventname = "Player takes fall damage";
		event.duration = (35 * 60 * 2) + (35 * 30);
		event.type = E_Timed;
		return event;
	}
}

Class TUC_TeleportPlayer : TUC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		while (true)
		{
			int rng = random(0, level.Sectors.size() - 1);
			let c = level.Sectors[rng].centerspot;
			if (level.IsPointInLevel((c.x, c.y, level.Sectors[rng].floorplane.ZAtPoint(c))))
			{
				double ceilheight = level.Sectors[rng].ceilingplane.ZAtPoint(c);
				double floorheight = level.Sectors[rng].floorplane.ZAtPoint(c);
				if (ceilheight - floorheight > 64)
				{
					Player.SetOrigin((c.x, c.y, level.Sectors[rng].floorplane.ZAtPoint(c)), false);
					Actor.spawn('TeleportFog', (c.x, c.y, level.Sectors[rng].floorplane.ZAtPoint(c)));
					break;
				}
			}
		}
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_TeleportPlayer');
		event.eventname = "Teleport to random sector";
		event.duration = 35 * 90;
		event.type = E_Instant;
		return event;
	}
}