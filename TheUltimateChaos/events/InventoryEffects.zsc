Class TUC_DoubleAmmo : TUC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				let def = getDefaultByType(gun.getClass());
				
				gun.AmmoUse1 = def.AmmoUse1 * 2;
				gun.AmmoUse2 = def.AmmoUse2 * 2;
			}
		}
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				let def = getDefaultByType(gun.getClass());
				
				gun.AmmoUse1 = def.AmmoUse1;
				gun.AmmoUse2 = def.AmmoUse2;
			}
		}
	}

	static TUC_Event create()
	{
		TUC_Event event = new('TUC_DoubleAmmo');
		event.eventname = "sv_infiniteammo -1";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_InfiniteAmmo : TUC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				gun.AmmoUse1 = 0;
				gun.AmmoUse2 = 0;
				gun.bAmmo_Optional = true;
			}
		}
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				let def = getDefaultByType(gun.getClass());
				
				gun.AmmoUse1 = def.AmmoUse1;
				gun.AmmoUse2 = def.AmmoUse2;
				gun.bAmmo_Optional = def.bAmmo_Optional;
			}
		}
	}

	static TUC_Event create()
	{
		TUC_Event event = new('TUC_InfiniteAmmo');
		event.eventname = "sv_infiniteammo 1";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_FastWeapons : TUC_Event
{
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		
		for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
		{
			if (sprite.tics > 1) sprite.tics = 1;
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_FastWeapons');
		event.eventname = "sv_fastweapons 2";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_NegativeFastWeapons : TUC_Event
{
	state prevState;
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		
		if (!player) return;
		
		if (player.psprites.CurState != prevState)
		{
			prevState = player.psprites.CurState;
			
			for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
			{	
				sprite.tics *= 2;
			}
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_NegativeFastWeapons');
		event.eventname = "sv_fastweapons -2";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_RandomWeaponFrameDuration : TUC_Event
{
	state prevState;
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		
		if (player.psprites.CurState != prevState)
		{
			prevState = player.psprites.CurState;
			int tics = random(1, 10);
			for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
			{	
				sprite.tics = tics;
			}
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_RandomWeaponFrameDuration');
		event.eventname = "sv_fastweapons ???";
		event.duration = 35 * 60 * 2;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_InventorySickness : TUC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.bPickup = false;
		
		let item = player.inv;
		actor newitem;
		
		for (inventory item = player.inv; item != null; item = item.inv)
		{
			if (item is "EffectInventory" || item is "Fist") continue;
			else
			{
				Vector3 newpos = player.pos;
				newpos.z += 20;
				if (item is "weapon")
				{
					let gun = weapon(item);
					if (gun.ammo1)
					{
						if (player.countInv(gun.ammo1.getClassName()))
						{
							string ammotype = gun.ammo1.getClassName();
							newitem = Actor.spawn(ammotype, newpos);
							player.takeInventory(gun.ammo1.getClassName(), inventory(newitem).amount);
							break;
						}
					}
					if (gun.ammo2)
					{
						if (player.countInv(gun.ammo2.getClassName()))
						{
							string ammotype = gun.ammo2.getClassName();
							newitem = Actor.spawn(ammotype, newpos);
							player.takeInventory(gun.ammo2.getClassName(), inventory(newitem).amount);
							break;
						}
					}
					string guntype = item.getClassName();
					newitem = Actor.spawn(guntype, newpos);
					player.takeInventory(guntype, 1);
					break;
				}
				if (item is "key")
				{
					string keytype = item.getClassName();
					newitem = Actor.spawn(keytype, newpos);
					player.takeInventory(keytype, 1);
					break;
				}
			}
		}
		
		if (newitem)
		{
			newitem.thrust(5 + random(0, 10), player.angle + random(-15, 15));
		}
		
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.bPickup = true;
	}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_InventorySickness');
		event.eventname = "Inventory sickness";
		event.duration = 35 * 10;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_TakeAllKeysAway : TUC_Event
{
	Array<String> keys;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		
		for (inventory item = player.inv; item != null; item = item.inv)
		{
			if (item is "key")
			{
				keys.push(item.getClassName());
			}
		}
		
		for (int i = 0; i < keys.size(); ++i)
		{
			player.takeInventory(keys[i], 1);
		}
	}
	
	override void closeFunc()
	{
		if (keys.size())
		{
			let player = players[consoleplayer].mo;
			
			for (int i = 0; i < keys.size(); ++i)
			{
				player.giveInventory(keys[i], 1);
			}
		}
	}
	
	static TUC_Event create()
	{
		TUC_TakeAllKeysAway event = new('TUC_TakeAllKeysAway');
		event.eventname = "Can't find my keys!";
		event.duration = 35 * 90;
		event.type = E_Timed;
		event.keys.clear();
		return TUC_Event(event);
	}
}

Class TUC_GiveMegasphere : TUC_Event
{

	override void eventFunc()
	{
		if (GameInfo.GameType == GAME_Doom) givePlayerItem('Megasphere');
		if (GameInfo.GameType == GAME_Heretic) givePlayerItem('ArtiSuperHealth');
	}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveMegaSphere');
		event.eventname = "Give megasphere";
		event.duration = 35 * 60;
		event.type = E_Instant;
		return event;
	}
}

Class TUC_GiveLightAmp : TUC_Event
{
	override void eventFunc()
	{
		if (GameInfo.GameType == GAME_Doom) givePlayerItem('Infrared');
		if (GameInfo.GameType == GAME_Heretic) givePlayerItem('ArtiTorch');
		activated = true;
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveLightAmp');
		event.eventname = "Give light amp";
		event.duration = 35 * 120;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_GiveRadSuit : TUC_Event
{
	override void eventFunc()
	{
		givePlayerItem('RadSuit');
		activated = true;
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveRadSuit');
		event.eventname = "Give rad suit";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_GiveInvulnerabilitySphere : TUC_Event
{
	override void eventFunc()
	{
		givePlayerItem('InvulnerabilitySphere');
		activated = true;
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveInvulnerabilitySphere');
		event.eventname = "Give invulnerability";
		event.duration = 35 * 30;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_GiveBlurSphere : TUC_Event
{
	override void eventFunc()
	{
		if (GameInfo.GameType == GAME_Doom) givePlayerItem('BlurSphere');
		if (GameInfo.GameType == GAME_Heretic) givePlayerItem('ArtiInvisibility');
		activated = true;
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveBlurSphere');
		event.eventname = "Give Blur Sphere";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class TUC_GiveSoulsphere : TUC_Event
{
	override void eventFunc()
	{
		if (GameInfo.GameType == GAME_Doom) givePlayerItem('Soulsphere');
		if (GameInfo.GameType == GAME_Heretic) givePlayerItem('ArtiHealth');
		activated = true;
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveSoulsphere');
		event.eventname = "Give Soulsphere";
		event.duration = 35 * 60;
		event.type = E_Instant;
		return event;
	}
}

Class TUC_GiveHealthBonus : TUC_Event
{
	override void eventFunc()
	{
		if (GameInfo.GameType == GAME_Doom) givePlayerItem('HealthBonus');
		if (GameInfo.GameType == GAME_Heretic) givePlayerItem('CrystalVial');
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveHealthBonus');
		event.eventname = "Give single health bonus";
		event.duration = 35 * 60;
		event.type = E_Instant;
		return event;
	}
}

Class TUC_GiveArmorBonus : TUC_Event
{
	override void eventFunc()
	{
		givePlayerItem('ArmorBonus');
	}
	
	override void closeFunc() {}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveArmorBonus');
		event.eventname = "Give single armor bonus";
		event.duration = 35 * 60;
		event.type = E_Instant;
		return event;
	}
}

Class TUC_GiveBerserk : TUC_Event
{
	override void eventFunc()
	{
		givePlayerItem('Berserk');
		activated = true;
	}
	
	override void closeFunc()
	{
	
	}
	
	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveBerserk');
		event.eventname = "Give berserk";
		event.duration = 35 * 15;
		event.type = E_Instant;
		return event;
	}
}

Class TUC_GiveRandomWeapon : TUC_Event
{
	
	override void eventFunc()
	{
		WeaponSlots weapons = players[consoleplayer].weapons;
		
		Class<Weapon> selectedgun;
		
		while (true)
		{
			int rslot = random(0, 9);
			int size = weapons.slotSize(rslot);
			
			if (size == 0) continue;
			
			selectedgun = weapons.getWeapon(rslot, random(0, size - 1));
			break;
		}
		
		PlayerPawn player = players[consoleplayer].mo;
		
		let gun = Actor.spawn(selectedgun);
		if (!player.countInv(gun.getClassName()))
		{
			gun.touch(player);
			player.A_SelectWeapon(gun.getClassName());
			eventname = "Force switch to " .. gun.getClassName();
		}
		else
		{
			player.A_SelectWeapon(gun.getClassName());
			eventname = "Force switch to " .. gun.getClassName();
			gun.destroy();
		}
	}

	static TUC_Event create()
	{
		TUC_Event event = new('TUC_GiveRandomWeapon');
		event.eventname = "Give a gun";
		event.duration = 35 * 30;
		event.type = E_Instant;
		return event;
	}
}