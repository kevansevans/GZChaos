Class TUC_EventList play
{
	static TUC_EventList create()
	{
		TUC_EventList list = new('TUC_EventList');
		list.timemodifier = 1.0;
		list.cachedEffects.clear();
		return list;
	}
	
	bool debug;
	double timemodifier;
	
	EffectInventory effects;
	
	int timeLimit()
	{
		return int(Max(35 * 30 * timemodifier, 35 * 1));
	}
	
	Array<Int> cachedEffects;
	
	TUC_Event getEffect(int _ignore = -1)
	{
		int event = -1;
		
		if (!effects)
		{
			let player = players[consoleplayer].mo;
			
			for (inventory item = player.inv; item != null; item = item.inv)
			{	
				if (item is "EffectInventory")
				{
					effects = EffectInventory(item);
					break;
				}
			}
		}
		
		while (true)
		{
			event = random(0, E_NumEvents - 1);
			if (event == _ignore) continue;
			if (cachedEffects.size() == 0) break;
			switch (event)
			{
				case E_HalfTimerDuration:
					if (cachedEffects.find(E_QuarterTimerDuration) != cachedEffects.size()) continue;
					break;
				case E_QuarterTimerDuration:
					if (cachedEffects.find(E_HalfTimerDuration) != cachedEffects.size()) continue;
					break;
				case E_DisableForwardBackwards:
					if (cachedEffects.find(E_DisableStrafingMovement) != cachedEffects.size()) continue;
					break;
				case E_DisableStrafingMovement:
					if (cachedEffects.find(E_DisableForwardBackwards) != cachedEffects.size()) continue;
					break;
			}
			if (cachedEffects.find(event) == cachedEffects.size()) break;
		}
		
		TUC_Event selectedevent;
		
		while (true)
		{
			selectedevent = getEvent(event);
			for (int i = 0; i < effects.events.size(); ++i)
			{
				console.printf(selectedevent.getClassName());
				console.printf(effects.events[i].getClassName());
				if (selectedevent.getClassName() == effects.events[i].getClassName())
				{
					continue;
				}
			}
			break;
		}
		
		cachedEffects.push(event);
		
		if (cachedEffects.size() > 20) {
			cachedEffects.delete(0);
			cachedEffects.shrinkToFit();
		}
		
		if (!selectedevent) return TUC_DoNothing.create();
		else return selectedevent;
	}
	
	TUC_Event getEvent(int _input)
	{
		switch (_input)
		{
			case E_TakeAllKeysAway:
				return TUC_TakeAllKeysAway.create();
			case E_ReplaceHealthWithBonuses:
				return TUC_ReplaceHealthWithBonuses.create();
			case E_ReplaceMedikitWithStimpack:
				return TUC_ReplaceMedikitWithStimpack.create();
			case E_SpawnGreatGodImp:
				return TUC_SpawnGreatGodImp.create();
			case E_TheFloorIsLava:
				return TUC_TheFloorIsLava.create();
			case E_TheFloorIsNukage:
				return TUC_TheFloorIsNukage.create();
			case E_TheFloorIsSludge:
				return TUC_TheFloorIsSludge.create();
			case E_DisableForwardBackwards:
				return TUC_DisableForwardBackwards.create();
			case E_DisableStrafingMovement:
				return TUC_DisableStrafingMovement.create();
			case E_InvertPlayerMovement:
				return TUC_InvertPlayerMovement.create();
			case E_ShrinkPickups:
				return TUC_ShrinkPickups.create();
			case E_GameEndPlayer:
				if (random(1, 10) == 5) return TUC_GameEndPlayer.create();
				else return TUC_FakeGameEndPlayer.create();
			case E_RestartLevel:
				return TUC_RestartLevel.create();
			case E_CantStopFiring:
				return TUC_CantStopFiring.create();
			case E_NightmareMonsters:
				return TUC_NightmareMonsters.create();
			case E_NightmareRespawns:
				return TUC_NightmareRespawns.create();
			case E_SuperIcePhysics:
				return TUC_SuperIcePhysics.create();
			case E_FallDamage:
				return TUC_FallDamage.create();
			case E_TeleportPlayer:
				return TUC_TeleportPlayer.create();
			case E_Nothing:
				return TUC_DoNothing.create();
			case E_DoubleTimerDuration:
				return TUC_DoubleTimerDuration.create();
			case E_HalfTimerDuration:
				return TUC_HalfTimerDuration.create();
			case E_QuarterTimerDuration:
				return TUC_QuarterTimerDuration.create();
			case E_SetAllWallsToStartan:
				return TUC_SetAllWallsToStartan.create();
			case E_SetAllWallsToFireblu:
				return TUC_SetAllWallsToFireblu.create();
			case E_ShuffleKeyTextures:
				return TUC_ShuffleKeyTextures.create();
			case E_ShuffleItemsAround:
				return TUC_ShuffleItemsAround.create();
			case E_RollExtraEffects:
				return TUC_RollExtraEffects.create();
			case E_GiveMegaSphere:
				return TUC_GiveMegaSphere.create();
			case E_GiveLightAmp:
				return TUC_GiveLightAmp.create();
			case E_GiveRadSuit:
				return TUC_GiveRadSuit.create();
			case E_GiveInvulnerabilitySphere:
				return TUC_GiveInvulnerabilitySphere.create();
			case E_GivePistol:
				return TUC_GivePistol.create();
			case E_GiveShotgun:
				return TUC_GiveShotgun.create();
			case E_GiveSuperShotgun:
				return TUC_GiveSuperShotgun.create();
			case E_GiveChaingun:
				return TUC_GiveChaingun.create();
			case E_GiveRocketLauncher:
				return TUC_GiveRocketLauncher.create();
			case E_GivePlasmaRifle:
				return TUC_GivePlasmaRifle.create();
			case E_GiveBFG9000:
				return TUC_GiveBFG9000.create();
			case E_SpawnFriendlyGreatGodImp:
				return TUC_SpawnFriendlyGreatGodImp.create();
			case E_GiveHealthBonus:
				return TUC_GiveHealthBonus.create();
			case E_GiveArmorBonus:
				return TUC_GiveArmorBonus.create();
			case E_StatueEnemies:
				return TUC_StatueEnemies.create();
			case E_WideMonsters:
				return TUC_WideMonsters.create();
			case E_TallMonsters:
				return TUC_TallMonsters.create();
			case E_SpinningMonsters:
				return TUC_SpinningMonsters.create();
			case E_MisalignAllTextures:
				return TUC_MisalignAllTextures.create();
			case E_FakeGameEndPlayer:
				if (random(1, 10) == 5) return TUC_GameEndPlayer.create();
				else return TUC_FakeGameEndPlayer.create();
			case E_PlayCreeperHiss:
				return TUC_PlayCreeperHiss.create();
			case E_SetMusicToCursedMidi:
				return TUC_SetMusicToCursedMidi.create();
			case E_AnkleBiterEnemies:
				return TUC_AnkleBiterEnemies.create();
			case E_InventorySickness:
				return TUC_InventorySickness.create();
			case E_LeftJoyconDrift:	
				return TUC_LeftJoyconDrift.create();
			case E_RightJoyconDrift:
				return TUC_RightJoyconDrift.create();
			case E_BrokenBSPRendering:
				return TUC_BrokenBSPRendering.create();
			case E_ScardeyItems:
				return TUC_ScardeyItems.create();
			case E_ClearAutoMap:
				return TUC_ClearAutoMap.create();
			case E_HideTimerAndEffects:
				return TUC_HideTimerAndEffects.create();
			case E_ResetEffectTimers:
				return TUC_ResetEffectTimers.create();
		}
		
		return TUC_DoNothing.create();
	}
}

enum E_EventType
{
	E_Instant,
	E_Timed,
	E_PerLevel,
	E_HiddenTimer,
	E_Permnanent
}

enum E_Event
{
	E_TakeAllKeysAway,
	E_ReplaceHealthWithBonuses,
	E_ReplaceMedikitWithStimpack,
	E_SpawnGreatGodImp,
	E_TheFloorIsLava,
	E_TheFloorIsNukage,
	E_TheFloorIsSludge,
	E_DisableForwardBackwards,
	E_DisableStrafingMovement,
	E_InvertPlayerMovement,
	E_ShrinkPickups,
	E_GameEndPlayer,
	E_RestartLevel,
	E_CantStopFiring,
	E_NightmareMonsters,
	E_NightmareRespawns,
	E_SuperIcePhysics,
	E_FallDamage,
	E_TeleportPlayer,
	E_Nothing,
	E_DoubleTimerDuration,
	E_HalfTimerDuration,
	E_QuarterTimerDuration,
	E_SetAllWallsToStartan,
	E_SetAllWallsToFireblu,
	E_ShuffleKeyTextures,
	E_ShuffleItemsAround,
	E_RollExtraEffects,
	E_GiveMegaSphere,
	E_GiveLightAmp,
	E_GiveRadSuit,
	E_GiveInvulnerabilitySphere,
	E_GivePistol,
	E_GiveShotgun,
	E_GiveSuperShotgun,
	E_GiveChaingun,
	E_GiveRocketLauncher,
	E_GivePlasmaRifle,
	E_GiveBFG9000,
	E_SpawnFriendlyGreatGodImp,
	E_GiveHealthBonus,
	E_GiveArmorBonus,
	E_StatueEnemies,
	E_WideMonsters,
	E_TallMonsters,
	E_SpinningMonsters,
	E_MisalignAllTextures,
	E_FakeGameEndPlayer,
	E_SetMusicToCursedMidi,
	E_PlayCreeperHiss,
	E_AnkleBiterEnemies,
	E_InventorySickness,
	E_LeftJoyconDrift,
	E_RightJoyconDrift,
	E_BrokenBSPRendering,
	E_ScardeyItems,
	E_ClearAutoMap,
	E_HideTimerAndEffects,
	E_ResetEffectTimers,
	E_NumEvents
}

Class TUC_Event abstract play
{
	String eventname;
	Int duration;
	Int life;
	Bool activated;
	E_EventType type;
	abstract void eventFunc();
	abstract void closeFunc();
	
	void givePlayerItem(string _item)
	{
		let player = players[consoleplayer].mo;
		let item = Actor.spawn(_item);
		item.touch(player);
	}
	
	void giveAndSwitchTo(string _weapon)
	{
		let player = players[consoleplayer].mo;
		if (!player.countInv(_weapon))
		{
			let item = Actor.spawn(_weapon);
			item.touch(player);
		}
		player.A_SelectWeapon(_weapon);
	}
	
	bool checkIfReplaceable(String _textureName)
	{
		string texname = _texturename;
		switch (name(texname))
		{
			case 'BIGDOOR1':
			case 'BIGDOOR2':
			case 'BIGDOOR3':
			case 'BIGDOOR4':
			case 'BIGDOOR6':
			case 'BIGDOOR7':
			case 'DOOR1':
			case 'DOOR3':
			case 'DOORBLU':
			case 'DOORBLU2':
			case 'DOORRED':
			case 'DOORRED2':
			case 'DOORTRAK':
			case 'DOORYEL':
			case 'DOORYEL2':
			case 'EXITDOOR':
			case 'SPCDOOR1':
			case 'SPCDOOR2':
			case 'SPCDOOR3':
			case 'SPCDOOR4':
			case 'TEKBRON1':
			case 'TEKBRON2':
			case 'GATE1':
			case 'GATE2':
			case 'GATE3':
			case 'GATE4':
				return false;
		}
		
		texname.truncate(2);
		if (texname == "SW") return false;
		
		return true;
	}
}

Class EffectInventory : Inventory
{
	Array<TUC_Event> events;
}