Class GZC_EventList play
{
	Array<String> events;

	static GZC_EventList create()
	{
		GZC_EventList list = new('GZC_EventList');
		list.timemodifier = 1.0;
		list.cachedEffects.clear();
		
		list.events.clear();
		
		Array<String> cleaners;
		cleaners.clear();
		
		for (int i = 0; i < AllClasses.size(); ++i)
		{
			if (!(AllClasses[i] is "GZC_Event")) continue;
			
			let event = GZC_Event(new(AllClasses[i]));
			event.init();
			if (event.skipme) continue;
			
			list.events.push('' .. AllClasses[i].getClassName());
		}
		
		return list;
	}
	
	int rngcounter;
	int modifier;
	
	bool debug;
	double timemodifier;
	
	EffectInventory effects;
	
	int timeLimit()
	{
		int base = 35 * (min(max(30 + modifier, 20), 60));
		
		PlayerPawn player = players[consoleplayer].mo;
		
		base = int(base *= timemodifier);
	
		return int(max(5, base));
	}
	
	Array<String> cachedEffects;
	
	bool set;
	
	GZC_Event getEffect(int _ignore = -1)
	{
		if (!set)
		{
			set = true;
			let event = GZC_Event(new('GZC_QuarterTimerDuration'));
			event.init();
			return event;
		}
	
		PlayerPawn player = players[consoleplayer].mo;
		effects = EffectInventory(player.findInventory("EffectInventory"));
		
		GZC_Event selectedevent;
		bool restart;
		
		while (true)
		{
			rngcounter += random(1, events.size() - 1);
			rngcounter = rngcounter % events.size();
			
			let _event = new(events[rngcounter]);
			selectedevent = GZC_Event(_event);
			
			if (!selectedEvent.verify()) continue;
			
			selectedevent.init();
			
			String classname = selectedevent.getClassName();
			if (cachedEffects.find(classname) != cachedEffects.size()) continue;
			
			break;
		}
		
		String classname = selectedevent.getClassName();
		cachedEffects.push(classname);
		
		if (cachedEffects.size() > 20) {
			cachedEffects.delete(0);
			cachedEffects.shrinkToFit();
		}
		
		if (!selectedevent) return GZC_Event(new('GZC_DoNothing'));
		else return selectedevent;
	}
}

enum E_GameType
{
	GAME_Any	 = 0,
	GAME_Doom	 = 1,
	GAME_Heretic = 2,
	GAME_Hexen	 = 4,
	GAME_Strife	 = 8,
	GAME_Chex	 = 16,

	GAME_Raven			= GAME_Heretic|GAME_Hexen,
	GAME_DoomChex		= GAME_Doom|GAME_Chex,
	GAME_DoomStrifeChex	= GAME_Doom|GAME_Strife|GAME_Chex
}

enum E_EventType
{
	E_Instant,
	E_Timed,
	E_PerLevel,
	E_HiddenTimer,
	E_Permnanent
}

Class GZC_Event play
{
	String eventname;
	Int duration;
	Int life;
	Bool activated;
	Bool deleteme;
	Bool skipme;
	
	E_EventType type;
	
	virtual void init() 
	{
		skipme = true;
	}
	virtual void eventFunc(){}
	virtual void closeFunc(){}
	virtual void spawnFunc(Actor mo){}
	virtual void lineDamageFunc(WorldEvent event) {}
	
	//Prevents same effects from stacking, and can be used to prevent certain
	//effects from creating bad combinations.
	virtual bool verify()
	{
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is self.getClassName()) return false;
		}
		
		return true;
	}
	
	void givePlayerItem(string _item)
	{
		let player = players[consoleplayer].mo;
		let item = Actor.spawn(_item);
		item.touch(player);
	}
	
	void giveAndSwitchTo(string _weapon)
	{
		let player = players[consoleplayer].mo;
		if (!player.countInv(_weapon))
		{
			let item = Actor.spawn(_weapon);
			item.touch(player);
		}
		player.A_SelectWeapon(_weapon);
	}
	
	bool checkIfReplaceable(String _textureName)
	{
		string texname = _texturename;
		switch (name(texname))
		{
			case 'BIGDOOR1':
			case 'BIGDOOR2':
			case 'BIGDOOR3':
			case 'BIGDOOR4':
			case 'BIGDOOR6':
			case 'BIGDOOR7':
			case 'DOOR1':
			case 'DOOR3':
			case 'DOORBLU':
			case 'DOORBLU2':
			case 'DOORRED':
			case 'DOORRED2':
			case 'DOORTRAK':
			case 'DOORYEL':
			case 'DOORYEL2':
			case 'EXITDOOR':
			case 'SPCDOOR1':
			case 'SPCDOOR2':
			case 'SPCDOOR3':
			case 'SPCDOOR4':
			case 'TEKBRON1':
			case 'TEKBRON2':
			case 'GATE1':
			case 'GATE2':
			case 'GATE3':
			case 'GATE4':
				return false;
		}
		
		texname.truncate(2);
		if (texname == "SW") return false;
		
		return true;
	}
	
	static clearscope GZC_EventHandler fetch()
	{
		return GZC_EventHandler(StaticEventHandler.find("GZC_EventHandler"));
	}
}