class GZC_EffectDisplay : EventHandler
{
	bool hiddenEffect;
	
	GZC_EventHandler root;
	GZC_EventList list;
	
	textureid bgGreyBar;
	
	override void newGame()
	{
		hiddenEffect = false;
		
		SetOrder(2);
	}
	
	override void onRegister()
	{
		bgGreyBar = TexMan.checkForTexture('GREYMOD6');
	}
	
	override void WorldTick()
	{
		if (!root) getRootHandler();
	}
	
	override void RenderOverlay(RenderEvent event)
	{
		if (Cvar.getCvar("GZC_HideEverything", players[consoleplayer]).getBool()) return;
	
		let effects = root.effects;
		if (!effects) return;
		
		double xscale = double(Screen.getWidth()) / 2560.0;
		double yscale = double(Screen.getHeight()) / 1440.0;
		double userscale = Cvar.getCvar('GZC_EffectScaleAmount', players[consoleplayer]).getFloat() / 10.0;
		double hudscale = Cvar.getCvar('hud_scale', players[consoleplayer]).getFloat();
		xscale *= (hudscale <= 0 ? 1 * userscale : hudscale * userscale);
		yscale *= (hudscale <= 0 ? 1 * userscale : hudscale * userscale);
		
		int x1, y1, x2, y2;
		[x1, y1, x2, y2] = Screen.GetViewWindow();
		
		if (effects.events.size() > 0)
		{
			for (int i = 0; i < effects.events.size(); ++i)
			{
				if (hiddenEffect && !(effects.events[i] is "GZC_HideTimerAndEffects")) continue;
			
				GZC_Event effect = effects.events[i];
				int fontcolor = Font.CR_White;
				
				if (effect.deadEffect || effect.type != E_Timed) fontcolor = Font.CR_DarkGray;
				if (effect.life < 35) fontcolor = Font.CR_Yellow;
				
				int yOffset = 150 + int((60 * i) * yscale);
				
				if (150 + ((60 * (i + 1)) * yscale) > Screen.getHeight() - 150 + (120 * yscale))
				{
					Screen.DrawText(BIGFONT, fontcolor, 20 * xscale, yoffset, "And " .. effects.events.size() - i .. " more!", DTA_ScaleX, xscale, DTA_ScaleY, yscale);
					break;
				}
				
				Screen.DrawText(BIGFONT, fontcolor, 20 * xscale, yoffset, effect.eventname, DTA_ScaleX, xscale, DTA_ScaleY, yscale);
				
				if (effect.type == E_Timed && effect.life <= effect.duration)
				{
					Screen.DrawTexture(bgGreyBar, false, 20 * xscale, yOffset + (16 * yscale), DTA_ScaleX, xscale * 0.5, DTA_ScaleY, yscale * 0.5);
					double ratio = 1.0 - (double(effect.life) / double(effect.duration));
					Screen.DrawThickLine(25 * xscale, yOffset + (25.5 * yScale), (25 * xscale) + (600 * xscale * 0.5 * ratio), yOffset + (25.5 * yScale), 20 * yScale * 0.5, Color("FF0000")); 
				}
			}
		}
	}
	
	void getRootHandler()
	{
		root = GZC_EventHandler(StaticEventHandler.find('GZC_EventHandler'));
		list = root.list;
	}
}

Class GZC_TimerDisplay : EventHandler
{
	bool hiddenEffect;
	
	GZC_EventHandler root;
	GZC_EventList list;
	ui GZC_TimerBar activebar;
	
	int timelimit;

	override void onRegister()
	{
		SetOrder(200);
	}
	
	void getRootHandler()
	{
		root = GZC_EventHandler(StaticEventHandler.find('GZC_EventHandler'));
		list = root.list;
	}
	
	override void WorldTick()
	{
		if (!root) getRootHandler();
		
		timelimit = list.timelimit();
	}
	
	override void UiTick()
	{
		Cvar cvarTimerBar = Cvar.getCvar("GZC_TimerBarClassName", players[consoleplayer]);
		
		if (!activebar)
		{
			string classname = cvarTimerBar.getString();
			Class<GZC_TimerBar> bar = classname;
		
			if (bar)
			{
				activeBar = GZC_TimerBar(new(classname));
				activeBar.initBar();
				return;
			}
		}
		
		if (activebar.getClassName() == cvarTimerBar.getString()) return;
		else
		{
			string classname = cvarTimerBar.getString();
			Class<GZC_TimerBar> bar = classname;
		
			if (bar)
			{
				activeBar = GZC_TimerBar(new(classname));
				activeBar.initBar();
				return;
			}
		}
		
		activeBar = new('GZC_TimerBar_Green');
		activeBar.initBar();
		cvarTimerBar.setString('GZC_TimerBar_Green');
	}

	override void RenderUnderlay(RenderEvent event)
	{
		if (!root) return;
	
		if (!hiddenEffect)
		{
			let player = players[consoleplayer].mo;
			activeBar.drawBar(player.countInv('TimerToken'), timelimit);
		}
	}
}