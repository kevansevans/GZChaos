Class GZC_UpgradeToMegasphere : GZC_Event
{
	Array<String> classes;
	Array<Actor> pointers;

	override void eventFunc()
	{
		classes.clear();
		pointers.clear();
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while (mo = Actor(it.next()))
		{
			if (mo is "Health")
			{
				let item = Actor.spawn('Megasphere', mo.pos);
				pointers.push(item);
				classes.push(mo.getClassName() .. "");
				mo.destroy();
			}
		}
		
		activated = true;
	}
	
	override void closeFunc()
	{
		for (int i = 0; i < pointers.size(); ++i)
		{
			if (!pointers[i]) continue;
			
			Actor.spawn(classes[i], pointers[i].pos);
			pointers[i].destroy();
		}
	}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_UpgradeToMegasphere');
		event.eventname = "Cheap as dirt health";
		event.duration = 35 * 30;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_UpgradeToSoulsphere : GZC_Event
{
	Array<String> classes;
	Array<Actor> pointers;

	override void eventFunc()
	{
		classes.clear();
		pointers.clear();
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while (mo = Actor(it.next()))
		{
			if (mo is "Health" && !(mo is "Soulsphere"))
			{
				let item = Actor.spawn('Soulsphere', mo.pos);
				pointers.push(item);
				classes.push(mo.getClassName() .. "");
				mo.destroy();
			}
		}
		
		activated = true;
	}
	
	override void closeFunc()
	{
		for (int i = 0; i < pointers.size(); ++i)
		{
			if (!pointers[i]) continue;
			
			Actor.spawn(classes[i], pointers[i].pos);
			pointers[i].destroy();
		}
	}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_UpgradeToSoulsphere');
		event.eventname = "Health surplus";
		event.duration = 35 * 60 * 1;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_UpgradeToMedikit : GZC_Event
{
	Array<String> classes;
	Array<Actor> pointers;

	override void eventFunc()
	{
		classes.clear();
		pointers.clear();
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while (mo = Actor(it.next()))
		{
			if (mo is "HealthBonus" || mo is "Stimpack")
			{
				let item = Actor.spawn('Medikit', mo.pos);
				pointers.push(item);
				classes.push(mo.getClassName() .. "");
				mo.destroy();
			}
		}
		
		activated = true;
	}
	
	override void closeFunc()
	{
		for (int i = 0; i < pointers.size(); ++i)
		{
			if (!pointers[i]) continue;
			
			Actor.spawn(classes[i], pointers[i].pos);
			pointers[i].destroy();
		}
	}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_UpgradeToMedikit');
		event.eventname = "Health stimulus";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_UpgradeToStimpack : GZC_Event
{
	Array<String> classes;
	Array<Actor> pointers;

	override void eventFunc()
	{
		classes.clear();
		pointers.clear();
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while (mo = Actor(it.next()))
		{
			if (mo is "HealthBonus")
			{
				let item = Actor.spawn('stimpack', mo.pos);
				pointers.push(item);
				classes.push(mo.getClassName() .. "");
				mo.destroy();
			}
		}
		
		activated = true;
	}
	
	override void closeFunc()
	{
		for (int i = 0; i < pointers.size(); ++i)
		{
			if (!pointers[i]) continue;
			
			Actor.spawn(classes[i], pointers[i].pos);
			pointers[i].destroy();
		}
	}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_UpgradeToStimpack');
		event.eventname = "Health boost";
		event.duration = 35 * 60 * 5;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_DuplicatePickups : GZC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		Array<Actor> items;
		items.clear();
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo is "Inventory")
			{
				let item = mo;
				if (!Inventory(item).owner)
				{
					items.push(item);
				}
			}
		}
		
		for (int i = 0; i < items.size(); ++i)
		{
			let dupe = Actor.spawn(items[i].getClassName(), items[i].pos);
			dupe.thrust(2, random(0, 359));
		}
	}
	
	override void closeFunc()
	{
		
	}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_DuplicatePickups');
		event.eventname = "Duplicate all items";
		event.duration = 35 * 30;
		event.type = E_Instant;
		return event;
	}
}

Class GZC_ShuffleItemsAround : GZC_Event
{
	override void eventFunc()
	{
		vector3 lastpos;
		Array<Inventory> items;
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		items.clear();
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo is "Inventory")
			{
				if (mo is "key") continue;
				if (Inventory(mo).owner) continue;
				items.push(Inventory(mo));
			}
		}
		
		if (items.size() == 0)
		{
			activated = true;
			return;
		}
		
		for (int i = 0; i < items.size(); ++i)
		{
			int index_a = -1;
			int index_b = -1;
		
			while (index_a == index_b)
			{
				index_a = random(0, items.size() - 1);
				index_b = random(0, items.size() - 1);
			}
			
			vector3 pos_a = items[index_a].pos;
			vector3 pos_b = items[index_b].pos;
			
			items[index_a].setOrigin(pos_b, false);
			items[index_b].setOrigin(pos_a, false);
		}
		
	}
	
	override void closeFunc() {}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_ShuffleItemsAround');
		event.eventname = "Shuffle Items";
		event.duration = 35 * 5;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_ShrinkPickups : GZC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while ( (mo = Actor(it.Next ())) )
		{
			if (mo is 'inventory')
			{
				mo.scale.x = 0.1;
				mo.scale.y = 0.1;
			}
		}
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while ( (mo = Actor(it.Next ())) )
		{
			if (mo is 'inventory')
			{
				let def = getDefaultByType(mo.getClass());
			
				mo.scale.x = def.scale.x;
				mo.scale.y = def.scale.y;
			}
		}
	}
	
	Static GZC_Event create()
	{
		GZC_Event event = new('GZC_ShrinkPickups');
		event.eventname = "What is this? A pickup for ants?";
		event.duration = 35 * 3 * 60;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_ReplaceHealthWithBonuses : GZC_Event
{
	Array<String> classes;
	Array<Actor> pointers;

	override void eventFunc()
	{
		classes.clear();
		pointers.clear();
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while ((mo = Actor(it.Next ())))
		{
			if ((mo is "health" && !(mo is "Healthbonus")) || mo is "Megasphere")
			{
				classes.push(mo.getClassName() .. "");
				let item = Actor.spawn('healthbonus', mo.pos);
				pointers.push(item);
				mo.destroy();
			}
		}
		
	}
	
	override void closeFunc() 
	{
		for (int i = 0; i < classes.size(); ++i)
		{
			if (!pointers[i]) continue;
			let className = classes[i];
			let org = Actor.spawn(className, pointers[i].pos);
			pointers[i].destroy();
		}
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_ReplaceHealthWithBonuses');
		event.eventname = "Health Famine";
		event.duration = 35 * 60 * 2;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_ReplaceMedikitWithStimpack : GZC_Event
{
	Array<String> classes;
	Array<Actor> pointers;

	override void eventFunc()
	{
		classes.clear();
		pointers.clear();
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo is "medikit" || mo is "soulsphere")
			{
				classes.push(mo.getClassName() .. "");
				let item = Actor.spawn('stimpack', mo.pos);
				pointers.push(item);
				mo.destroy();
			}
		}
		
		activated = true;
	}
	
	override void closeFunc() 
	{
		for (int i = 0; i < classes.size(); ++i)
		{
			if (!pointers[i]) continue;
			
			let org = Actor.spawn(classes[i], pointers[i].pos);
			pointers[i].destroy();
		}
	
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_ReplaceMedikitWithStimpack');
		event.eventname = "Health Recession";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_DestroyAllHealth : GZC_Event
{
	Array<String> classes;
	Array<float> x;
	Array<float> y;
	Array<float> z;

	override void eventFunc()
	{
		classes.clear();
		x.clear();
		y.clear();
		z.clear();
	
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo is "health" || mo is "megasphere")
			{
				classes.push(mo.getClassName() .. "");
				x.push(mo.pos.x);
				y.push(mo.pos.y);
				z.push(mo.pos.z);
				mo.destroy();
			}
		}
		
		activated = true;
	}
	
	override void closeFunc() 
	{
		for (int i = 0; i < classes.size(); ++i)
		{
			if (!classes[i]) continue;
			
			let org = Actor.spawn(classes[i], (x[i],y[i],z[i]));
		}
	
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_DestroyAllHealth');
		event.eventname = "Health Extinction";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}