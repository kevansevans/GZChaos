Class GZC_PortraitMode : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		player.giveInventory('GZC_PortraitModeToken', 1);
		activated = true;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		player.takeInventory('GZC_PortraitModeToken', 999);
	}
	
	override void init()
	{
		eventname = "Portrait mode";
		duration = 35 * 60;
		type = E_Timed;
	}
}

class GZC_PortraitModeToken : inventory {}

Class GZC_SuperHot : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		player.giveInventory('GZC_SuperHotToken', 1);
		activated = true;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		player.takeInventory('GZC_SuperHotToken', 1);
	}
	
	override void init()
	{
		eventname = "SUPER HOT";
		duration = 35 * 30;
		type = E_Timed;
	}
}

Class GZC_SuperHotToken : Inventory {}

Class GZC_AutoPong : GZC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.giveInventory('GZC_PongToken', 1);
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.takeInventory('GZC_PongToken', 1);
	}
	
	override void init()
	{
		eventname = "Pong";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_PongToken : Inventory {}

Class GZC_ResetEffectTimers : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
			
		for (inventory item = player.inv; item != null; item = item.inv)
		{	
			if (item is "EffectInventory")
			{
				EffectInventory effect = EffectInventory(item);
				
				for (int i = 0; i < effect.events.size(); ++i)
				{
					if (effect.events[i].type == E_Timed)
					{
						effect.events[i].life = 0;
					}
				}
				
				break;
			}
		}
	}
	
	override void closeFunc()
	{
		
	}

	override void init()
	{
		eventname = "Reset effect timers";
		duration = 35 * 60;
		type = E_Instant;
	}
}

Class GZC_HideTimerAndEffects : GZC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.giveInventory('GZC_HideTimerToken', 1);
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.takeInventory('GZC_HideTimerToken', 1);
	}

	override void init()
	{
		eventname = "Hidden timer and effects";
		duration = 35 * 60 * 3;
		type = E_Timed;
	}
}

Class GZC_HideTimerToken : Inventory {}

Class GZC_DoubleTimerDuration : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_QuarterTimerDuration") return false;
			if (event is "GZC_HalfTimerDuration") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.giveInventory('GZC_DoubleTimerToken', 1);
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.takeInventory('GZC_DoubleTimerToken', 1);
	}
	
	override void init()
	{
		eventname = "1/2 timer speed";
		duration = 35 * 60 * 5;
		type = E_Timed;
	}
}

Class GZC_DoubleTimerToken : Inventory {}

Class GZC_HalfTimerDuration : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_DoubleTimerDuration") return false;
			if (event is "GZC_QuarterTimerDuration") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.giveInventory('GZC_HalfTimerToken', 1);
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.takeInventory('GZC_HalfTimerToken', 1);
	}
	
	override void init()
	{
		eventname = "2x timer speed";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_FuckYourGodmode : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer];
		player.cheats &= ~(CF_GODMODE);
	}

	override bool verify()
	{
		let player = players[consoleplayer];
		
		if (player.cheats & CF_GODMODE) return true;
		
		return false;
	}

	override void init()
	{
		eventname = "No god mode for you!";
		duration = 35 * 60;
		type = E_Instant;
	}
}

Class GZC_HalfTimerToken : Inventory {}

Class GZC_QuarterTimerDuration : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_DoubleTimerDuration") return false;
			if (event is "GZC_HalfTimerDuration") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.giveInventory('GZC_QuarterTimerToken', 1);
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.takeInventory('GZC_QuarterTimerToken', 1);
	}
	
	override void init()
	{
		eventname = "4x timer speed";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_QuarterTimerToken : Inventory {}

Class GZC_RollExtraEffects : GZC_Event
{
	int bonuseffects;

	override void eventFunc()
	{
		if (gametic % 5 == 0 && bonuseffects > 0)
		{
			EventHandler.SendNetworkEvent("rolleffect");
			--bonuseffects;
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	override void init()
	{
		bonuseffects = random(2, 5);
		eventname = "Roll " .. bonuseffects .. " extra effects";
		duration = 35 * 60;
		type = E_HiddenTimer;
	}
}

Class GZC_DoNothing : GZC_Event
{
	override void eventFunc(){}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Nothing.";
		duration = 35 * 60;
		type = E_Instant;
	}
}