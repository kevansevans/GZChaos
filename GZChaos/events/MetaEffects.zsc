Class GZC_PortraitMode : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		player.giveInventory('GZC_PortraitModeToken', 1);
		activated = true;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		player.takeInventory('GZC_PortraitModeToken', 1);
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_PortraitMode');
		event.eventname = "Portrait mode";
		event.duration = 35 * 60;
		event.type = E_Timed;
		return event;
	}
}

class GZC_PortraitModeToken : inventory {}

Class GZC_SuperHot : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		player.giveInventory('GZC_SuperHotToken', 1);
		activated = true;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		player.takeInventory('GZC_SuperHotToken', 1);
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_SuperHot');
		event.eventname = "SUPER HOT";
		event.duration = 35 * 30;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_SuperHotToken : Inventory {}

Class GZC_AutoPong : GZC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.giveInventory('GZC_PongToken', 1);
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.takeInventory('GZC_PongToken', 1);
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_AutoPong');
		event.eventname = "Pong";
		event.duration = 35 * 60 * 5;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_PongToken : Inventory {}

Class GZC_ResetEffectTimers : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
			
		for (inventory item = player.inv; item != null; item = item.inv)
		{	
			if (item is "EffectInventory")
			{
				EffectInventory effect = EffectInventory(item);
				
				for (int i = 0; i < effect.events.size(); ++i)
				{
					if (effect.events[i].type == E_Timed)
					{
						effect.events[i].life = 0;
					}
				}
				
				break;
			}
		}
	}
	
	override void closeFunc()
	{
		
	}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_ResetEffectTimers');
		event.eventname = "Reset effect timers";
		event.duration = 35 * 60;
		event.type = E_Instant;
		return event;
	}
}

Class GZC_HideTimerAndEffects : GZC_Event
{
	override void eventFunc()
	{
		EventHandler.SendNetworkEvent("meta:hideeverything");
	}
	
	override void closeFunc()
	{
		EventHandler.SendNetworkEvent("meta:showeverything");
	}

	static GZC_Event create()
	{
		GZC_Event event = new('GZC_HideTimerAndEffects');
		event.eventname = "Hidden timer and effects";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_DoubleTimerDuration : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_QuarterTimerDuration") return false;
			if (event is "GZC_HalfTimerDuration") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		EventHandler.SendNetworkEvent("meta:slowdown:2");
		activated = true;
	}
	
	override void closeFunc()
	{
		EventHandler.SendNetworkEvent("meta:speedup:2");
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_DoubleTimerDuration');
		event.eventname = "1/2 timer speed";
		event.duration = 35 * 60 * 5;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_HalfTimerDuration : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_DoubleTimerDuration") return false;
			if (event is "GZC_QuarterTimerDuration") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		EventHandler.SendNetworkEvent("meta:speedup:2");
		activated = true;
	}
	
	override void closeFunc()
	{
		EventHandler.SendNetworkEvent("meta:slowdown:2");
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_HalfTimerDuration');
		event.eventname = "2x timer speed";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_QuarterTimerDuration : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_DoubleTimerDuration") return false;
			if (event is "GZC_HalfTimerDuration") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		EventHandler.SendNetworkEvent("meta:speedup:4");
		activated = true;
	}
	
	override void closeFunc()
	{
		EventHandler.SendNetworkEvent("meta:slowdown:4");
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_QuarterTimerDuration');
		event.eventname = "4x timer speed";
		event.duration = 35 * 60 * 3;
		event.type = E_Timed;
		return event;
	}
}

Class GZC_RollExtraEffects : GZC_Event
{
	int bonuseffects;

	override void eventFunc()
	{
		if (gametic % 5 == 0 && bonuseffects > 0)
		{
			EventHandler.SendNetworkEvent("rolleffect");
			--bonuseffects;
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_RollExtraEffects');
		GZC_RollExtraEffects(event).bonuseffects = random(2, 5);
		event.eventname = "Roll " .. GZC_RollExtraEffects(event).bonuseffects .. " extra effects";
		event.duration = 35 * 60;
		event.type = E_HiddenTimer;
		return event;
	}
}

Class GZC_DoNothing : GZC_Event
{
	override void eventFunc(){}
	
	override void closeFunc() {}
	
	static GZC_Event create()
	{
		GZC_Event event = new('GZC_DoNothing');
		event.eventname = "Nothing.";
		event.duration = 35 * 60;
		event.type = E_Instant;
		return event;
	}
}