Class GZC_MissingWad : GZC_TextureSwapEffect
{
	bool cleared;
	Map<String, SpriteID> sprites;

	override void eventFunc()
	{
		if (!cleared)
		{
			sprites.clear();
			cleared = true;
		}
		
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo.sprite != mo.GetSpriteIndex('TNT1'))
			{
				if (mo.sprite != mo.getSpriteIndex('UNKN'))
				{
					string act = mo.getClassName();
					if (!sprites.checkKey(act)) sprites.insert(act, mo.sprite);
				}
				mo.sprite = mo.GetSpriteIndex('UNKN');
				mo.frame = 0;
			}
		}
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo.health <= 0) continue;
		
			string act = mo.getClassName();
			mo.sprite = sprites.get(act);
		}
	}
	
	override void init()
	{
		eventname = "!";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_RainbowBlood : GZC_Event
{
	override void spawnFunc(Actor mo)
	{
		if (!(mo is "Blood")) return;
		
		mo.A_SetRenderStyle(1.0, Style_Stencil);
		mo.SetShade(Color(random(0, 255), random(0, 255), random(0, 255)));
	}

	override void init()
	{
		eventname = "Rainbow Blood";
		duration = 35 * 60 * 3;
		type = E_Timed;
	}
}

Class GZC_TallWeaponSprites : GZC_Event
{
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		let def = getDefaultByType(Weapon(players[consoleplayer].readyWeapon).getClass());
		
		for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
		{
			sprite.scale.Y = def.WeaponScaleY * 3;
			sprite.scale.X = def.WeaponScaleX * 0.5;
			sprite.VAlign = PSPA_BOTTOM;
			sprite.HAlign = PSPA_CENTER;
		}
		
	}
	
	override void closeFunc()
	{
		PlayerInfo player = players[consoleplayer];
		let def = getDefaultByType(Weapon(players[consoleplayer].readyWeapon).getClass());
		
		for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
		{
			sprite.scale.y = def.WeaponScaleY;
			sprite.scale.x = def.WeaponScaleX;
			sprite.VAlign = PSPA_TOP;
			sprite.HAlign = PSPA_Left;
		}
	}
	
	override void init()
	{
		eventname = "Tall and thin weapon sprites";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_WideWeaponSprites : GZC_Event
{
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		let def = getDefaultByType(Weapon(players[consoleplayer].readyWeapon).getClass());
		
		for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
		{
			sprite.scale.x = def.WeaponScaleX * 4;
			sprite.scale.Y = def.WeaponScaleY * 0.5;
			sprite.HAlign = PSPA_CENTER;
			sprite.VAlign = PSPA_BOTTOM;
		}
		
	}
	
	override void closeFunc()
	{
		PlayerInfo player = players[consoleplayer];
		let def = getDefaultByType(Weapon(players[consoleplayer].readyWeapon).getClass());
		
		for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
		{
			sprite.scale.x = def.WeaponScaleX;
			sprite.scale.y = def.WeaponScaleX;
			sprite.HAlign = PSPA_Left;
			sprite.VAlign = PSPA_TOP;
		}
	}
	
	override void init()
	{
		eventname = "Wide and stout weapon sprites";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_SuperNintendoDoom : GZC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				mo.bSpriteAngle = true;
				mo.spriteAngle = 180;
			}	
		}
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				mo.bSpriteAngle = false;
			}	
		}
	}
	
	override void init()
	{
		eventname = "Doom for the SNES";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_SpinningMonsters : GZC_Event
{
	int factor;

	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		if (!factor) factor = random(-15, 15);
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				mo.bRollSprite = true;
				mo.bRollCenter = true;
				mo.roll += factor;
			}
		}
	}
	
	override void closeFunc() 
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				let def = getDefaultByType(mo.getClass());
				
				mo.bRollSprite = def.bRollSprite;
				mo.bRollCenter = def.bRollCenter;
				mo.roll = def.roll;
			}
		}
	}
	
	override void init()
	{
		eventname = "On a roll";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_WideMonsters : GZC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				mo.scale.x = 5;
			}
		}
	}
	
	override void closeFunc() 
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				let def = getDefaultByType(mo.getClass());
				mo.scale.x = def.scale.x;
			}
		}
	}
	
	override void spawnFunc(Actor mo)
	{
		if (mo.bIsMonster)
		{
			mo.scale.y = 7;
		}
	}
	
	override void init()
	{
		eventname = "Wide Monster sprites";
		duration = 35 * 90;
		type = E_Timed;
	}
}

Class GZC_TallMonsters : GZC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				mo.scale.y = 7;
			}
		}
	}
	
	override void closeFunc() 
	{
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
	
		while ((mo = Actor(it.Next ())))
		{
			if (mo.bIsMonster)
			{
				let def = getDefaultByType(mo.getClass());
				mo.scale.y = def.scale.y;
			}
		}
	}
	
	override void spawnFunc(Actor mo)
	{
		if (mo.bIsMonster)
		{
			mo.scale.y = 7;
		}
	}
	
	override void init()
	{
		eventname = "Tall Monster sprites";
		duration = 35 * 90;
		type = E_Timed;
	}
}