Class GZC_DigDugWalking : GZC_Event
{
	string original;
	
	override void eventFunc()
	{
		let player = players[consoleplayer];
		if (!original) 
		{
			original = Level.music;
			player.mo.S_ChangeMusic('DIGDUG');
		}
		
		if (!(player.cmd.buttons & (BT_Forward | BT_Back | BT_Left | BT_Right | BT_MoveLeft | BT_MoveRight)))
		{
			S_PauseSound(false, true);
		}
	}
	
	override void loadFunc()
	{
		let player = players[consoleplayer];
		original = Level.music;
		player.mo.S_ChangeMusic('DIGDUG');
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer];
		player.mo.S_ChangeMusic(original);
	}
	
	override void init()
	{
		eventname = "DIG DUG";
		duration = 35 * 60 * 3;
		type = E_Timed;
	}
}

Class GZC_RandomActorSoundPitch : GZC_Event
{
	double randomvalue;
	
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.create("Actor");
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			for (int i = 0; i < 8; ++i)
			{
				mo.A_SoundPitch(i, randomvalue);
			}
		}
	}
	
	override void deathFunc(Actor _mo)
	{
		randomvalue = frandom(0.25, 2);
	}

	override void init()
	{
		eventname = "Smack my pitch up";
		duration = 35 * 60 * 3;
		type = E_Timed;
	}
}

Class GZC_TheEddsAreComing : GZC_Event //More like GZC_EddEvent, hue hue hue
{
	override void eventFunc()
	{
		startReassignment();
		
		activated = true;
	}
	
	override void spawnFunc(Actor _mo)
	{
		if (_mo.bIsmonster) return;
		reassignDeathSound(_mo);
	}
	
	override void loadFunc()
	{
		startReassignment();
	}
	
	void startReassignment()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (!mo.bIsMonster) continue;
			reassignDeathSound(mo);
		}
	}
	
	void reassignDeathSound(Actor _mo)
	{
		_mo.DeathSound = "EEnE/kill";
		_mo.bFullVolDeath = true;
	}
	
	override void preActivateLine(WorldEvent _event)
	{
		let player = players[consoleplayer].mo;
		player.A_StartSound("EEnE/Line", CHAN_AUTO);
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (!mo.bIsMonster) continue;
			
			let def = getDefaultByType(mo.getClass());
			mo.DeathSound = def.DeathSound;
			mo.bFullVolDeath = def.bFullVolDeath;
		}
	}

	override void init()
	{
		eventname = "The Edds Are Coming!";
		duration = 35 * 60 * 5;
		type = E_Timed;
	}
}

Class GZC_QuipItGood : GZC_Event
{
	override void deathFunc(Actor _mo)
	{
		if (!_mo.bIsMonster) return;
		
		let player = players[consoleplayer].mo;
		player.A_StartSound("Quip/Quip", CHAN_AUTO);
	}

	override void init()
	{
		eventname = "Quip it Good";
		duration = 35 * 60 * 5;
		type = E_Timed;
	}
}

Class GZC_WhipCrack : GZC_Event
{
	bool spawned;
	bool whip;
	
	int buttons;
	
	override void eventFunc()
	{
		if (whip)
		{
			WhipCrack();
			whip = false;
		}
	
		if (!spawned)
		{
			spawned = true;
			whip = true;
		}
		
		let player = players[consoleplayer];
		if (self.buttons != player.buttons)
		{
			whip = true;
			self.buttons = player.buttons;
		}
	}
	
	override void CloseFunc()
	{
		whip = true;
	}

	override void preActivateLine(WorldEvent event)
	{
		whip = true;
	}

	override void DeathFunc(Actor _mo)
	{
		whipCrack();
	}

	override void SpawnFunc(Actor _mo)
	{
		if (!_mo.bIsMonster) return;
		whip = true;
	}
	
	void WhipCrack()
	{
		let player = players[consoleplayer].mo;
		player.A_StartSound("Whip/Crack", CHAN_AUTO);
	}

	override void init()
	{
		eventname = "Johnny Test";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_SetMusicToCursedMidi : GZC_Event
{
	string levelmus;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		
		levelmus = level.music;
	
		int rng = random(0, E_NumSongs - 1);
		switch (rng)
		{
			case E_RUNNNN:
				player.S_ChangeMusic('D_RUNNNN');
				eventname = eventname .. " - D_RUNNNN";
				break;
			case E_DURGEN:
				player.S_ChangeMusic('DRGNFRCE');
				eventname = eventname .. " - TRO DA FER AN DA FWAMES";
				break;
			case E_MEGALO:
				player.S_ChangeMusic('MEGALODOOMIA');
				eventname = eventname .. " - Megalodoomia";
				break;
			case E_VENFLOW:
				player.S_ChangeMusic('EVENFLOW');
				eventname = eventname .. " - Evenflow (Pearl Jam)";
				break;
			case E_SKRILLEX:
				player.S_ChangeMusic('SKRILLEX');
				eventname = eventname .. " - Scary Monsters and Nice Sprites (Skrillex)";
				break;
		}
		
		activated = true;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		player.S_ChangeMusic(levelmus);
	}
	
	override void init()
	{
		eventname = "Cursed music";
		duration = 35 * 30 * 5;
		type = E_Timed;
		deleteme = true;
	}
}

enum E_Music
{
	E_RUNNNN,
	E_DURGEN,
	E_MEGALO,
	E_VENFLOW,
	E_SKRILLEX,
	E_NumSongs
}

Class GZC_FakeNotification : GZC_Event
{
	bool set;
	int ticcount;
	int interval;
	
	override void eventFunc()
	{
		if (!set)
		{
			ticcount = gametic;
			interval = random(5, 10);
			set = true;
		}
		if (gametic - ticcount > 35 * interval)
		{
			let player = players[consoleplayer].mo;
			player.A_StartSound("disc/ord", CHAN_AUTO, 0, 1, ATTN_NONE);
			eventname = "Nothing?";
			activated = true;
		}
	}
	
	override void init()
	{
		eventname = "Nothing.";
		duration = 35 * 60;
		type = E_HiddenTimer;
	}
}