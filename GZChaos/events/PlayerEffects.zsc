Class GZC_CoffeeBreak : GZC_Event
{
	String lastweapon;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		
		if (!self.lastweapon) {
			lastweapon = player.player.readyWeapon.getClassName();
		}
		
		if (!(player.player.readyWeapon is 'CoffeeMug'))
		{
			player.giveInventory('CoffeeMug', 1);
			player.A_SelectWeapon('CoffeeMug');
		}
		
		if (player.player.readyWeapon is 'CoffeeMug')
		{
			let coffee = CoffeeMug(player.player.readyWeapon);
			coffee.lastweapon = self.lastweapon;
			
			if (player.health >= 100)
			{
				activated = true;
			}
		}
		
		if (activated)
		{
			life = 0;
		}
	}
	
	override void closeFunc()
	{
	
	}

	override void init()
	{
		eventname = "Coffee break";
		duration = 35 * 60 * 90;
		type = E_HiddenTimer;
	}
}

Class GZC_ShrunkTheDoomguy : GZC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		player.A_SetSize(player.radius * 0.1, player.height * 0.1);
		player.viewHeight *= 0.1;
		player.player.viewHeight *= 0.01;
		player.forwardMove1 *= 0.1;
		player.forwardMove2 *= 0.1;
		player.sideMove1 *= 0.1;
		player.sideMove2 *= 0.1;
		player.MaxStepHeight *= 0.1;
		player.ViewBob *= 0.1;
		
		activated = true;
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		let def = GetDefaultByType(player.getClass());
		player.A_SetSize(def.radius, def.height);
		player.viewHeight = def.viewHeight;
		player.player.viewHeight = def.viewHeight;
		player.forwardMove1 = def.forwardMove1;
		player.forwardMove2 = def.forwardMove2;
		player.sideMove1 = def.sideMove1;
		player.sideMove2 = def.sideMove2;
		player.MaxStepHeight = def.MaxStepHeight;
		player.viewBob = def.viewBob;
	}

	override void init()
	{
		GZC_Event event = new('GZC_ShrunkTheDoomguy');
		eventname = "Honey, I shrunk the Doomguy!";
		duration = 35 * 60 * 3;
		type = E_Timed;

	}
}

Class GZC_MorphEffect : GZC_Event
{}

Class GZC_MorphIntoDog : GZC_MorphEffect
{
	Class<Actor> original;

	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		player.A_Morph('DogPlayer', duration);
		
		activated = true;
	}
	
	override void closeFunc()
	{
	
	}

	override void init()
	{
		GZC_Event event = new('GZC_MorphIntoDog');
		eventname = "Dog mode!";
		duration = 35 * 60 * 2;
		type = E_Timed;
		deleteMe = true;

	}
}

Class GZC_MorphIntoChicken : GZC_MorphEffect
{
	Class<Actor> original;

	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		player.A_Morph('ChickenPlayer', duration);
		
		activated = true;
	}
	
	override void closeFunc()
	{
	
	}

	override void init()
	{
		eventname = "cockadoodledoo!";
		duration = 35 * 60 * 2;
		type = E_Timed;
		deleteMe = true;
	}
}

Class GZC_DoubleRunning : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());
		
		player.forwardMove1 = def.forwardMove1 * 4;
		player.forwardMove2 = def.forwardMove2 * 2;
		player.sideMove1 = def.sideMove1 * 4;
		player.sideMove2 = def.sideMove2 * 2;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());
		
		player.forwardMove1 = def.forwardMove1;
		player.forwardMove2 = def.forwardMove2;
		player.sideMove1 = def.sideMove1;
		player.sideMove2 = def.sideMove2;
	}

	override void init()
	{
		eventname = "Give it the gas!";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_DisableRunning : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());
		
		player.forwardMove2 = def.forwardMove2 / 2;
		player.sideMove2 = def.sideMove2 / 2;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());
		
		player.forwardMove2 = def.forwardMove2;
		player.sideMove2 = def.sideMove2;
	}

	override void init()
	{
		eventname = "No need to rush";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_StartRecording : GZC_Event
{
	//stupid gzdoom not letting me use vector3's in an array
	Array<Double> posx;
	Array<Double> posy;
	Array<Double> posz;
	Array<Double> angles;
	
	int st;

	override void eventFunc()
	{
		if (!posx.size())
		{
			posx.clear();
			posy.clear();
			posz.clear();
			angles.clear();
			st = 0;
		}
		
		PlayerPawn player = players[consoleplayer].mo;
		
		switch (st)
		{
			case 0:
			
				Vector3 checkpoint = player.pos;
				Double checkangle = player.angle;
				
				posx.push(checkpoint.x);
				posy.push(checkpoint.y);
				posz.push(checkpoint.z);
				
				angles.push(checkangle);
				
				if (life == duration - 1)
				{
					st = 1;
					life = 0;
					eventname = "<< Rewinding";
				}
				break;
			case 1:
			
				int index = posx.size() - 1;
				
				player.setOrigin((posx[index], posy[index], posz[index]), true);
				player.angle = angles[index];
				
				posx.delete(index);
				posy.delete(index);
				posz.delete(index);
				
				angles.delete(index);
				
				posx.shrinkToFit();
				posy.shrinkToFit();
				posz.shrinkToFit();
				
				angles.shrinkToFit();
				
				break;
		}
	}
		
	override void closeFunc()
	{
	
	}
	
	override void init()
	{
		eventname = "Recording";
		duration = 35 * 15;
		type = E_Timed;
		deleteme = true;
	}
}

Class GZC_ScardeyItems : GZC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		
		while ((mo = Actor(it.Next ())))
		{
			if (mo is "Inventory")
			{
				if (player.distance3D(mo) < 256)
				{
					mo.bSlidesOnWalls = true;
					mo.bNoBlockMonst = true;
					mo.thrust(15, player.angleTo(mo));
				}
			}
		}
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
	}
	
	override void init()
	{
		GZC_Event event = new('GZC_ScardeyItems');
		eventname = "Pickups are scared of player";
		duration = 35 * 60 * 2;
		type = E_Timed;

	}
}

Class GZC_RightJoyconDrift : GZC_Event
{
	double drift;
	double angle;
	
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		double xspeed = cos(angle) * drift;
		double yspeed = sin(angle) * drift;
		
		if (player.cmd.pitch == 0 && player.cmd.yaw == 0)
		{
			player.mo.angle += (xspeed / 1000);
			if (!player.centering) player.mo.pitch += (yspeed / 1000);
		
			player.mo.CheckPitch();
		}
	}
	
	override void closeFunc()
	{
	
	}
	
	override void init()
	{
		drift = random(400, 600);
		angle = random(0, 359);
		eventname = "Right Joycon drift";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_LeftJoyconDrift : GZC_Event
{
	double drift;
	double angle;
	
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		double xspeed = cos(angle) * drift;
		
		if (player.cmd.forwardmove == 0 && player.cmd.sidemove == 0)
		{
			player.mo.thrust(xspeed / 2000, (xspeed / 2000) + player.mo.angle);
		}
	}
	
	override void closeFunc()
	{
	
	}
	
	override void init()
	{
		drift = random(400, 600);
		angle = random(0, 359);
		eventname = "Left Joycon drift";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_DisableForwardBackwards : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_DisableStrafingMovement") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		player.forwardMove1 = player.forwardMove2 = 0;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());
		
		player.forwardMove1 = def.ForwardMove1;
		player.forwardMove2 = def.ForwardMove2;
	}
	
	override void init()
	{
		eventname = "Disable Forward/Backwards movement";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_DisableStrafingMovement : GZC_Event
{
	override bool verify()
	{
		bool result = Super.verify();
	
		PlayerPawn player = players[consoleplayer].mo;
		EffectInventory effects = EffectInventory(player.findInventory("EffectInventory"));
		
		for (int i = 0; i < effects.events.size(); ++i)
		{
			GZC_Event event = effects.events[i];
			if (event is "GZC_DisableForwardBackwards") return false;
		}
		
		return result;
	}

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		player.sideMove1 = player.sideMove2 = 0;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());
		
		player.sideMove1 = def.sideMove1;
		player.sideMove2 = def.sideMove2;
	}
	
	override void init()
	{
		eventname = "Disable strafing movement";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_InvertPlayerMovement : GZC_Event
{
	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());

		player.forwardMove1 = def.forwardMove1 * -1;
		player.forwardMove2 = def.forwardMove2 * -1;
		player.sideMove1 = def.sideMove1 * -1;
		player.sideMove2 = def.sideMove2 * -1;
	}
	
	override void closeFunc()
	{
		let player = players[consoleplayer].mo;
		let def = getDefaultByType(player.getClass());

		player.forwardMove1 = def.forwardMove1;
		player.forwardMove2 = def.forwardMove2;
		player.sideMove1 = def.sideMove1;
		player.sideMove2 = def.sideMove2;
	}
	
	override void init()
	{
		eventname = "Inverted movement";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_GameEndPlayer : GZC_Event
{
	int startframe;
	bool screm;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		if (!screm)
		{
			player.A_PlayerScream();
			screm = true;
		}
		if (gametic - startframe >= 35 * 1)
		{
			player.A_Explode(999, 64);
			activated = true;
		}
		else
		{
			Player.A_SetMugshotState("Ouch");
		}
	}
	
	override void closeFunc()
	{
	
	}

	override void init()
	{
		startframe = gametic;
		eventname = "Player commits suicide";
		duration = 35 * 90;
		type = E_HiddenTimer;
	}
}

Class GZC_FakeGameEndPlayer : GZC_Event
{
	int startframe;
	bool screm;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		if (!screm)
		{
			player.A_PlayerScream();
			screm = true;
		}
		if (gametic - startframe <= 35 * 1)
		{
			Player.A_SetMugshotState("Ouch");
		}
		else if (gametic - startframe >= 35 * 3)
		{
			eventname = "Fake suicide :)";
			activated = true;
		}
	}
	
	override void closeFunc()
	{
	
	}

	override void init()
	{
		startframe = gametic;
		eventname = "Player commits suicide";
		duration = 35 * 90;
		type = E_HiddenTimer;
	}
}

Class GZC_CantStopFiring : GZC_Event
{
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		player.cmd.buttons |= (BT_ATTACK | BT_ALTATTACK);
		player.mo.checkWeaponFire();
	}
	
	override void closeFunc()
	{
	
	}

	override void init()
	{
		eventname = "Can't stop shooting!";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_SuperIcePhysics : GZC_Event
{
	override void eventFUnc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bNoFriction = true;
	}
	
	override void closeFunc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bNoFriction = false;
	}
	
	override void init()
	{
		eventname = "Disabled player friction";
		duration = (35 * 60 * 2) + (35 * 30);
		type = E_Timed;
	}
}

Class GZC_FallDamage : GZC_Event
{
	override void eventFUnc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bFallDamage = true;
	}
	
	override void closeFunc()
	{
		PlayerInfo player = players[consoleplayer];
		player.mo.bFallDamage = false;
	}
	
	override void init()
	{
		eventname = "Player takes fall damage";
		duration = (35 * 60 * 2) + (35 * 30);
		type = E_Timed;
	}
}

Class GZC_TeleportPlayer : GZC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		
		while (true)
		{
			int rng = random(0, level.Sectors.size() - 1);
			let c = level.Sectors[rng].centerspot;
			if (level.IsPointInLevel((c.x, c.y, level.Sectors[rng].floorplane.ZAtPoint(c))))
			{
				double ceilheight = level.Sectors[rng].ceilingplane.ZAtPoint(c);
				double floorheight = level.Sectors[rng].floorplane.ZAtPoint(c);
				if (ceilheight - floorheight > 64)
				{
					player.teleport((c.x, c.y, level.Sectors[rng].floorplane.ZAtPoint(c)), player.angle, 1);
					break;
				}
			}
		}
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Teleport to random sector";
		duration = 35 * 90;
		type = E_Instant;
	}
}