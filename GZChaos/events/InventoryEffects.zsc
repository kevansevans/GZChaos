Class GZC_CantHaveShitInDetroit : GZC_Event
{
	override void eventFunc()
	{
		Array<String> items;
		items.clear();
	
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			let item = Inventory(mo);
			if (!item) continue;
			if (!item.owner) continue;
			if (!(item.owner is 'PlayerPawn')) continue;
			if (item is 'PuzzleItem' || item is 'Key') continue;
			if (item is 'Fist' || item is 'Pistol') continue;
			
			items.push(item.getClassName());
		}
		
		let player = players[consoleplayer].mo;
		int rng = random(0, items.size() - 1);
		player.TakeInventory(items[rng], 0x7FFFFFFF);
		String itemname = (items[rng] == "HexenArmor" ? "Armor" : items[rng]);
		eventname = "Dude, where's my " .. itemname .. "?";
		
		activated = true;
	}

	override void init()
	{
		eventname = "This is a placeholder";
		duration = 35 * 30;
		type = E_Instant;
	}
}

Class GZC_DoubleAmmo : GZC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				let def = getDefaultByType(gun.getClass());
				
				gun.AmmoUse1 = def.AmmoUse1 * 2;
				gun.AmmoUse2 = def.AmmoUse2 * 2;
			}
		}
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				let def = getDefaultByType(gun.getClass());
				
				gun.AmmoUse1 = def.AmmoUse1;
				gun.AmmoUse2 = def.AmmoUse2;
			}
		}
	}

	override void init()
	{
		eventname = "sv_infiniteammo -1";
		duration = 35 * 60 * 3;
		type = E_Timed;
	}
}

Class GZC_InfiniteAmmo : GZC_Event
{
	override void eventFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				gun.AmmoUse1 = 0;
				gun.AmmoUse2 = 0;
				gun.bAmmo_Optional = true;
			}
		}
	}
	
	override void closeFunc()
	{
		ThinkerIterator it = ThinkerIterator.create('Actor');
		Actor mo;
		
		while (mo = Actor(it.next()))
		{
			if (mo is "weapon" && Inventory(mo).owner)
			{
				let gun = Weapon(mo);
				let def = getDefaultByType(gun.getClass());
				
				gun.AmmoUse1 = def.AmmoUse1;
				gun.AmmoUse2 = def.AmmoUse2;
				gun.bAmmo_Optional = def.bAmmo_Optional;
			}
		}
	}

	override void init()
	{
		eventname = "sv_infiniteammo 1";
		duration = 35 * 60 * 3;
		type = E_Timed;
	}
}

Class GZC_FastWeapons : GZC_Event
{
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		
		for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
		{
			if (sprite.tics > 1) sprite.tics = 1;
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	override void init()
	{
		eventname = "sv_fastweapons 2";
		duration = 35 * 60 * 3;
		type = E_Timed;
	}
}

Class GZC_NegativeFastWeapons : GZC_Event
{
	state prevState;
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		
		if (!player) return;
		
		if (player.psprites.CurState != prevState)
		{
			prevState = player.psprites.CurState;
			
			for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
			{	
				sprite.tics *= 2;
			}
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	override void init()
	{
		eventname = "sv_fastweapons -2";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_RandomWeaponFrameDuration : GZC_Event
{
	state prevState;
	override void eventFunc()
	{
		PlayerInfo player = players[consoleplayer];
		
		if (player.psprites.CurState != prevState)
		{
			prevState = player.psprites.CurState;
			int tics = random(1, 10);
			for (PSprite sprite = player.psprites; sprite != null; sprite = sprite.next)
			{	
				sprite.tics = tics;
			}
		}
	}
	
	override void closeFunc()
	{
		
	}
	
	override void init()
	{
		eventname = "sv_fastweapons ???";
		duration = 35 * 60 * 2;
		type = E_Timed;
	}
}

Class GZC_InventorySickness : GZC_Event
{
	override void eventFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.bPickup = false;
		
		let item = player.inv;
		actor newitem;
		
		for (inventory item = player.inv; item != null; item = item.inv)
		{
			if (item is "EffectInventory" || item is "Fist" || item is "Doggie" || item is "beak") continue;
			else
			{
				Vector3 newpos = player.pos;
				newpos.z += 20;
				if (item is "weapon")
				{
					let gun = weapon(item);
					if (gun.ammo1)
					{
						if (player.countInv(gun.ammo1.getClassName()))
						{
							string ammotype = gun.ammo1.getClassName();
							newitem = Actor.spawn(ammotype, newpos);
							player.takeInventory(gun.ammo1.getClassName(), inventory(newitem).amount);
							break;
						}
					}
					if (gun.ammo2)
					{
						if (player.countInv(gun.ammo2.getClassName()))
						{
							string ammotype = gun.ammo2.getClassName();
							newitem = Actor.spawn(ammotype, newpos);
							player.takeInventory(gun.ammo2.getClassName(), inventory(newitem).amount);
							break;
						}
					}
					string guntype = item.getClassName();
					newitem = Actor.spawn(guntype, newpos);
					player.takeInventory(guntype, 1);
					break;
				}
				if (item is "key")
				{
					string keytype = item.getClassName();
					newitem = Actor.spawn(keytype, newpos);
					player.takeInventory(keytype, 1);
					break;
				}
			}
		}
		
		if (newitem)
		{
			newitem.thrust(5 + random(0, 10), player.angle + random(-15, 15));
		}
		
	}
	
	override void closeFunc()
	{
		PlayerPawn player = players[consoleplayer].mo;
		player.bPickup = true;
	}
	
	override void init()
	{
		eventname = "Inventory sickness";
		duration = 35 * 5;
		type = E_Timed;
	}
}

Class GZC_TakeAllKeysAway : GZC_Event
{
	Array<String> keys;

	override void eventFunc()
	{
		let player = players[consoleplayer].mo;
		
		for (inventory item = player.inv; item != null; item = item.inv)
		{
			if (item is "key")
			{
				keys.push(item.getClassName());
			}
		}
		
		for (int i = 0; i < keys.size(); ++i)
		{
			player.takeInventory(keys[i], 1);
		}
	}
	
	override void closeFunc()
	{
		if (keys.size())
		{
			let player = players[consoleplayer].mo;
			
			for (int i = 0; i < keys.size(); ++i)
			{
				player.giveInventory(keys[i], 1);
			}
		}
	}
	
	override void init()
	{
		eventname = "Can't find my keys!";
		duration = 35 * 90;
		type = E_Timed;
		keys.clear();
	}
}

Class GZC_GiveMegasphere : GZC_Event
{

	override void eventFunc()
	{
		givePlayerItem('Megasphere');
	}
	
	override void init()
	{
		eventname = "Give megasphere";
		duration = 35 * 60;
		type = E_Instant;
	}
}

Class GZC_GiveLightAmp : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('Infrared');
		activated = true;
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Give light amp";
		duration = 35 * 120;
		type = E_Timed;
	}
}

Class GZC_GiveRadSuit : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('RadSuit');
		activated = true;
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Give rad suit";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_GiveInvulnerabilitySphere : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('InvulnerabilitySphere');
		activated = true;
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Give invulnerability";
		duration = 35 * 30;
		type = E_Timed;
	}
}

Class GZC_GiveBlurSphere : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('BlurSphere');
		activated = true;
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Give Blur Sphere";
		duration = 35 * 60;
		type = E_Timed;
	}
}

Class GZC_GiveSoulsphere : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('Soulsphere');
		activated = true;
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Give Soulsphere";
		duration = 35 * 60;
		type = E_Instant;
	}
}

Class GZC_GiveHealthBonus : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('HealthBonus');
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Give single health bonus";
		duration = 35 * 60;
		type = E_Instant;
	}
}

Class GZC_GiveArmorBonus : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('ArmorBonus');
	}
	
	override void closeFunc() {}
	
	override void init()
	{
		eventname = "Give single armor bonus";
		duration = 35 * 60;
		type = E_Instant;
	}
}

Class GZC_GiveBerserk : GZC_Event
{
	override void eventFunc()
	{
		givePlayerItem('Berserk');
		activated = true;
	}
	
	override void closeFunc()
	{
	
	}
	
	override void init()
	{
		eventname = "Give berserk";
		duration = 35 * 15;
		type = E_Instant;
	}
}

Class GZC_GiveRandomWeapon : GZC_Event
{
	
	override void eventFunc()
	{
		WeaponSlots weapons = players[consoleplayer].weapons;
		
		Class<Weapon> selectedgun;
		
		while (true)
		{
			int rslot = random(0, 9);
			int size = weapons.slotSize(rslot);
			
			if (size == 0) continue;
			
			selectedgun = weapons.getWeapon(rslot, random(0, size - 1));
			break;
		}
		
		PlayerPawn player = players[consoleplayer].mo;
		
		let gun = Actor.spawn(selectedgun);
		if (!player.countInv(gun.getClassName()))
		{
			gun.touch(player);
			player.A_SelectWeapon(gun.getClassName());
			eventname = "Force switch to " .. gun.getClassName();
		}
		else
		{
			player.A_SelectWeapon(gun.getClassName());
			eventname = "Force switch to " .. gun.getClassName();
			gun.destroy();
		}
	}

	override void init()
	{
		eventname = "Give a gun";
		duration = 35 * 30;
		type = E_Instant;
	}
}